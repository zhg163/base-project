---
description: 
globs: 
alwaysApply: true
---

# 分析问题时考虑对原有代码影响的思维框架

所有的修改符合设计规范

要在每次分析问题时全面考虑对原有代码的影响，我会采用以下系统化思维框架：

## 1. 全局影响分析
- 所有依赖于修改组件的服务和功能
- 上下游数据流和API调用链
- 现有测试和持续集成流程

## 2. 代码修改后果评估
- 变更的范围（尽量控制在最小必要范围）
- API契约变更对客户端的影响
- 运行时性能和资源消耗影响

## 3. 兼容性维护策略
- 向后兼容性解决方案（如路由重定向、兼容层）
- 渐进式部署策略（如特性标志、A/B测试）
- 文档和注释更新需求

## 4. 风险分级与缓解
- 高、中、低风险变更的识别
- 针对每类风险的验证和回滚策略
- 部署前的检查清单

**如何避免？**
   - **增量式开发和集成**：新功能应以“增强”而非“替换”为原则，先保留原有流程，再逐步插入新逻辑。不影响本次开发的其他功能代码不要修改。
   - **对比新旧代码**：在PR或代码提交前，明确对比新旧方法的流程，确保所有关键节点都被保留或合理迁移。

# 修改bug给出方案前先分析现有的代码，优先使用现在代码解决问题，不要新引入框架，第三方包
  新增需求时，因为第三方包，给出详细的理由
